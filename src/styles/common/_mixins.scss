@mixin default-font {
  font-family: $font-family-base;
  font-weight: $default-font-weight;
}

@mixin default-font-bold {
  font-family: $font-family-base;
  font-weight: $bold-font-weight;
}

@mixin border-radius-default {
  @include flexible-value((
    prop: border-radius,
    value: 16px,
    value-xs: 8px,
  ));
}

@mixin body-typography {
  @include default-font;

  @include flexible-value((
    prop: font-size,
    value: 20px,
    value-lg: 16px,
    value-xs: 12px,
  ));

  @include flexible-value((
    prop: line-height,
    value: 28.2px,
    value-lg: 23.52px,
    value-xs: 16.92px,
  ));
}

@mixin button-typography {
  @include default-font-bold;
  color: $neutral-100;

  @include flexible-value((
    prop: font-size,
    value: 18px,
    value-lg: 16px,
    value-xs: 12px,
  ));

  @include flexible-value((
    prop: line-height,
    value: 25.38px,
    value-lg: 22.56px,
    value-xs: 16.92px,
  ));
}

@mixin headline {
  font-family: $secondary-font;
  font-weight: $default-font-weight;

  @include flexible-value((
    prop: font-size,
    value: 72px,
    value-lg: 48px,
    value-xs: 28px,
  ));

  @include flexible-value((
    prop: line-height,
    value: 76.32px,
    value-lg: 51.84px,
    value-xs: 31.64px,
  ));
}

@mixin link-typography {
  @include default-font-bold;

  @include flexible-value((
    prop: font-size,
    value: 12px,
    value-xs: 8px,
  ));

  @include flexible-value((
    prop: line-height,
    value: 16.92px,
    value-xs: 11.28px,
  ));
}

@mixin button {
  display: inline-block;
  background-color: $primary-400;
  border-radius: 8px;
  text-align: center;

  @include button-typography;

  @include flexible-values((
    prop: padding,
    directions: (top right bottom left),
    values: (16px, 32px, 16px, 32px),
    values-xs: (11px, 20px, 11px, 20px),
  ));

  &:hover {
    background-color: $primary-btn-hover;
  }

  &:active {
    background-color: $primary-500;
  }
}

@mixin mobile-display($option) {
  @if $option == hide {
    @include flexible-value((
      prop: display,
      value: flex,
      value-lg: flex,
      value-sm: flex,
      value-xs: none,
    ));
  } @else if $option == display {
    @include flexible-value((
      prop: display,
      value: none,
      value-lg: none,
      value-sm: inline,
      value-xs: inline,
    ));
  }
}

@mixin transition($prop-name: all) {
  transition: $prop-name 0.2s ease-in-out;
}

// prop — e.g. 'padding' or 'border'
// directions — e.g. 'left' or 'right' => for prop 'padding' we'll get — 'padding-left' and 'padding-right'
// values — max-values, for > 1200px
// values-lg — values for interval 992px-1199px
// values-md — values for interval 768-991px
// values-sm — values for interval 576-767px
// values-xs — values for <576px
@mixin flexible-values($args) {
  $prop-name: map-get($args, prop);
  $directions: map-get($args, directions);
  $values: map-get($args, values); // xl
  $values-lg: map-get($args, values-lg); // lg
  $values-md: map-get($args, values-md); // md
  $values-sm: map-get($args, values-sm); // sm
  $values-xs: map-get($args, values-xs); // xs
  $use-transition: map-get($args, use-transition);

  @if not $prop-name {
    @warn "Prop name is required";
  }

  @if not $values {
    @warn "Values is required";
  }

  @if not $directions {
    @warn "Directions is required";
  }

  // if the point doesn't have a value, we use the value for the larger point
  $values-lg: if($values-lg, $values-lg, $values);
  $values-md: if($values-md, $values-md, $values-lg);
  $values-sm: if($values-sm, $values-sm, $values-md);
  $values-xs: if($values-xs, $values-xs, $values-sm);

  @for $i from 1 through length($directions) {
    $direction: nth($directions, $i);
    $value: nth($values, $i);
    $value-lg: nth($values-lg, $i);
    $value-md: nth($values-md, $i);
    $value-sm: nth($values-sm, $i);
    $value-xs: nth($values-xs, $i);

    #{$prop-name + "-" + $direction}: $value-xs;

    @include media-breakpoint-up(sm) {
      #{$prop-name + "-" + $direction}: $value-sm;
    }

    @include media-breakpoint-up(md) {
      #{$prop-name + "-" + $direction}: $value-md;
    }

    @include media-breakpoint-up(lg) {
      #{$prop-name + "-" + $direction}: $value-lg;
    }

    @include media-breakpoint-up(xl) {
      #{$prop-name + "-" + $direction}: $value;
    }
  }

  // animation
  @if $use-transition {
    @include transition($prop-name);
  }
}

// prop — e.g. 'padding' or 'border'
// value — max-values, for > 1200px
// value-lg — value for interval 992px-1199px
// value-md — value for interval 768-991px
// value-sm — value for interval 576-767px
// value-xs — value for <576px
@mixin flexible-value($args) {
  $prop-name: map-get($args, prop);
  $value: map-get($args, value); // xl
  $value-lg: map-get($args, value-lg); // lg
  $value-md: map-get($args, value-md); // md
  $value-sm: map-get($args, value-sm); // sm
  $value-xs: map-get($args, value-xs); // xs
  $use-transition: map-get($args, use-transition);

  // if the point doesn't have a value, we use the value for the larger point
  $value-lg: if($value-lg, $value-lg, $value);
  $value-md: if($value-md, $value-md, $value-lg);
  $value-sm: if($value-sm, $value-sm, $value-md);
  $value-xs: if($value-xs, $value-xs, $value-sm);

  @if not $prop-name {
    @warn "Prop name is required";
  }

  @if not $value {
    @warn "Value is required";
  }

  #{$prop-name}: $value-xs;

  @include media-breakpoint-up(sm) {
    #{$prop-name}: $value-sm;
  }

  @include media-breakpoint-up(md) {
    #{$prop-name}: $value-md;
  }

  @include media-breakpoint-up(lg) {
    #{$prop-name}: $value-lg;
  }

  @include media-breakpoint-up(xl) {
    #{$prop-name}: $value;
  }

  // animation
  @if $use-transition {
    @include transition($prop-name);
  }
}
